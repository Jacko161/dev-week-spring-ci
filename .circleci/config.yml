# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
orbs:
  slack: circleci/slack@4.4.4
jobs:
  build_test:
    docker:
      # specify the version you desire here
      - image: cimg/openjdk:16.0.2

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - run:
          name: Extract Email Address of committer
          command: |
            COMMIT_EMAIL=$(git --no-pager log -1 -s --format="%ae")
            echo "export COMMIT_EMAIL=$COMMIT_EMAIL" >> $BASH_ENV
      - run:
          name: Get Slack User ID
          command: |
            SLACK_USER_ID=$(curl -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" -d "email=$COMMIT_EMAIL" https://slack.com/api/users.lookupByEmail | jq '.user.id')
            echo "export SLACK_USER_ID=$SLACK_USER_ID" >> $BASH_ENV

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle test
      - run:
          name: Get JAR Version
          command: |
            JAR_VERSION=$(gradle printVersion -q)
            echo "export JAR_VERSION=$JAR_VERSION" >> $BASH_ENV
      - run:
          name: Build Container
          command: |
            echo "$DOCKER_PASS" | docker login --username "$API_USER" --password-stdin devweek.jfrog.io
            docker build -t dev-week/api:$JAR_VERSION
            docker push dev-week/api:$JAR_VERSION
      - slack/notify:
          event: fail
          channel: '$SLACK_USER_ID'
          template: basic_fail_1

  deploy_preproduction:
    docker:
       - image: cimg/openjdk:16.0.2
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Extract Email Address of committer
          command: |
            COMMIT_EMAIL=$(git --no-pager log -1 -s --format="%ae")
            echo "export COMMIT_EMAIL=$COMMIT_EMAIL" >> $BASH_ENV
      - run:
          name: Get Slack User ID
          command: |
            SLACK_USER_ID=$(curl -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" -d "email=$COMMIT_EMAIL" https://slack.com/api/users.lookupByEmail | jq '.user.id')
            echo "export SLACK_USER_ID=$SLACK_USER_ID" >> $BASH_ENV
      - slack/notify:
          event: fail
          channel: '$SLACK_USER_ID'
          template: basic_fail_1
      - run:
          name: Run AWX Job
          command: |
            OUTPUT=$(curl -L --request POST 'https://awx.jfleming.dev/api/v2/job_templates/Deploy API/launch/' --header "Authorization: Bearer $AWX_API_TOKEN" --header 'Content-Type: application/json' --data-raw "{\"extra_vars\": {\"user_email\": \"$COMMIT_EMAIL\"}}")
            AWX_JOB_ID=$(echo $OUTPUT | jq -r '.id')
            echo "export AWX_JOB_URL=https://awx.jfleming.dev/#/jobs/playbook/$AWX_JOB_ID/output" >> $BASH_ENV
            echo https://awx.jfleming.dev/#/jobs/playbook/$AWX_JOB_ID/output
workflows:
  build_test_deploy:
    jobs:
      - build_test:
          context:
           - slack-secrets
      - deploy_preproduction:
          requires:
            - build_test
          context:
            - AWX-secrets
            - slack-secrets
          filters:
            branches:
              only: main